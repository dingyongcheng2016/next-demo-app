import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '@/pages/about/Styles.module.less';
import { useRouter } from 'next/router';
import fetch from '@/utils/request';
import _ from 'lodash';

const Detail: NextPage =({post}:any)=>{
    const router = useRouter();
    const { id, pid} = router.query;
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App Home Detail!</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div>hello world {id}Detail!{pid}</div>
            <div>{post.title}</div>
            <div>{post.context}</div>
        </div>
    )
};

// // 此函数在构建时被调用
export async function getStaticPaths() {
    // 调用外部 API 获取博文列表
    const res = await fetch('https://www.fastmock.site/mock/44dbc9af5043091cd3b24974fff963b9/next/api/blog/list');
    const posts = res.data;
    console.log('posts123', posts)
    // 据博文列表生成所有需要预渲染的路径
    const paths =  posts.map((post: any) => ({
        params: { id: post.id },
    }))
    
  
    // We'll pre-render only these paths at build time.
    // { fallback: false } means other routes should 404.
    return { paths, fallback: false }
}

//   // 在构建时也会被调用
export async function getStaticProps({ params }: any) {
    // params 包含此片博文的 `id` 信息。
    // 如果路由是 /posts/1，那么 params.id 就是 1
    console.log('params', params)
    const res = await fetch(`https://www.fastmock.site/mock/44dbc9af5043091cd3b24974fff963b9/next/api/blog/${params.id}`)
    const post = res.data;
    console.log('post', post);
  
    // 通过 props 参数向页面传递博文的数据
    return { props: { post } }
  }

export default Detail;